-- Drop existing table if it exists
DROP TABLE IF EXISTS public.mentorship_features;

-- Create the mentorship_features table
CREATE TABLE public.mentorship_features (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    icon_name TEXT NOT NULL,
    gradient TEXT NOT NULL,
    display_order INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for updated_at
DROP TRIGGER IF EXISTS set_updated_at ON public.mentorship_features;
CREATE TRIGGER set_updated_at
    BEFORE UPDATE ON public.mentorship_features
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

-- Drop existing RLS policies
DROP POLICY IF EXISTS "Allow public read access" ON public.mentorship_features;
DROP POLICY IF EXISTS "Allow authenticated users to update" ON public.mentorship_features;
DROP POLICY IF EXISTS "Allow authenticated users to insert" ON public.mentorship_features;
DROP POLICY IF EXISTS "Allow authenticated users to delete" ON public.mentorship_features;

-- Enable Row Level Security
ALTER TABLE public.mentorship_features ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Allow public read access"
    ON public.mentorship_features
    FOR SELECT
    USING (true);

CREATE POLICY "Allow authenticated users to update"
    ON public.mentorship_features
    FOR UPDATE
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Allow authenticated users to insert"
    ON public.mentorship_features
    FOR INSERT
    TO authenticated
    WITH CHECK (true);

CREATE POLICY "Allow authenticated users to delete"
    ON public.mentorship_features
    FOR DELETE
    TO authenticated
    USING (true);

-- Grant necessary permissions
GRANT ALL ON public.mentorship_features TO authenticated;
GRANT SELECT ON public.mentorship_features TO anon;
GRANT USAGE ON SEQUENCE public.mentorship_features_id_seq TO authenticated;

-- Insert initial data if table is empty
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM public.mentorship_features LIMIT 1) THEN
        INSERT INTO public.mentorship_features (title, description, icon_name, gradient, display_order)
        VALUES 
            ('Personalized Guidance', 'Get expert guidance tailored to your unique needs and goals', 'FaUserCheck', 'from-blue-500 to-indigo-500', 0),
            ('Customized Plans', 'Receive tailored nutrition and workout plans that fit your lifestyle', 'FaChalkboardTeacher', 'from-purple-500 to-pink-500', 1),
            ('1-on-1 Support', 'Regular one-on-one sessions to track progress and adjust your plans', 'FaHandshake', 'from-green-500 to-teal-500', 2),
            ('Progress Tracking', 'Track your progress with detailed metrics and regular check-ins', 'FaChartLine', 'from-yellow-500 to-orange-500', 3);
    END IF;
END $$;
